/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as NotesIndexRouteImport } from './routes/notes/index'
import { Route as NotesCategoryRouteRouteImport } from './routes/notes/$category/route'
import { Route as NotesCategoryIdRouteImport } from './routes/notes/$category/$id'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const NotesIndexRoute = NotesIndexRouteImport.update({
  id: '/notes/',
  path: '/notes/',
  getParentRoute: () => rootRouteImport,
} as any)
const NotesCategoryRouteRoute = NotesCategoryRouteRouteImport.update({
  id: '/notes/$category',
  path: '/notes/$category',
  getParentRoute: () => rootRouteImport,
} as any)
const NotesCategoryIdRoute = NotesCategoryIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => NotesCategoryRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/notes/$category': typeof NotesCategoryRouteRouteWithChildren
  '/notes': typeof NotesIndexRoute
  '/notes/$category/$id': typeof NotesCategoryIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/notes/$category': typeof NotesCategoryRouteRouteWithChildren
  '/notes': typeof NotesIndexRoute
  '/notes/$category/$id': typeof NotesCategoryIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/notes/$category': typeof NotesCategoryRouteRouteWithChildren
  '/notes/': typeof NotesIndexRoute
  '/notes/$category/$id': typeof NotesCategoryIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/notes/$category' | '/notes' | '/notes/$category/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/notes/$category' | '/notes' | '/notes/$category/$id'
  id: '__root__' | '/' | '/notes/$category' | '/notes/' | '/notes/$category/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NotesCategoryRouteRoute: typeof NotesCategoryRouteRouteWithChildren
  NotesIndexRoute: typeof NotesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notes/': {
      id: '/notes/'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof NotesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notes/$category': {
      id: '/notes/$category'
      path: '/notes/$category'
      fullPath: '/notes/$category'
      preLoaderRoute: typeof NotesCategoryRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notes/$category/$id': {
      id: '/notes/$category/$id'
      path: '/$id'
      fullPath: '/notes/$category/$id'
      preLoaderRoute: typeof NotesCategoryIdRouteImport
      parentRoute: typeof NotesCategoryRouteRoute
    }
  }
}

interface NotesCategoryRouteRouteChildren {
  NotesCategoryIdRoute: typeof NotesCategoryIdRoute
}

const NotesCategoryRouteRouteChildren: NotesCategoryRouteRouteChildren = {
  NotesCategoryIdRoute: NotesCategoryIdRoute,
}

const NotesCategoryRouteRouteWithChildren =
  NotesCategoryRouteRoute._addFileChildren(NotesCategoryRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NotesCategoryRouteRoute: NotesCategoryRouteRouteWithChildren,
  NotesIndexRoute: NotesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
