/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnauthorizedRouteImport } from './routes/unauthorized'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthNotesIndexRouteImport } from './routes/_auth/notes/index'
import { Route as AuthNotesCategoryRouteRouteImport } from './routes/_auth/notes/$category/route'
import { Route as AuthNotesCategoryIdRouteImport } from './routes/_auth/notes/$category/$id'

const UnauthorizedRoute = UnauthorizedRouteImport.update({
  id: '/unauthorized',
  path: '/unauthorized',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthNotesIndexRoute = AuthNotesIndexRouteImport.update({
  id: '/notes/',
  path: '/notes/',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthNotesCategoryRouteRoute = AuthNotesCategoryRouteRouteImport.update({
  id: '/notes/$category',
  path: '/notes/$category',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthNotesCategoryIdRoute = AuthNotesCategoryIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AuthNotesCategoryRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/notes/$category': typeof AuthNotesCategoryRouteRouteWithChildren
  '/notes': typeof AuthNotesIndexRoute
  '/notes/$category/$id': typeof AuthNotesCategoryIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/notes/$category': typeof AuthNotesCategoryRouteRouteWithChildren
  '/notes': typeof AuthNotesIndexRoute
  '/notes/$category/$id': typeof AuthNotesCategoryIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/unauthorized': typeof UnauthorizedRoute
  '/_auth/notes/$category': typeof AuthNotesCategoryRouteRouteWithChildren
  '/_auth/notes/': typeof AuthNotesIndexRoute
  '/_auth/notes/$category/$id': typeof AuthNotesCategoryIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/unauthorized'
    | '/notes/$category'
    | '/notes'
    | '/notes/$category/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/unauthorized'
    | '/notes/$category'
    | '/notes'
    | '/notes/$category/$id'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/unauthorized'
    | '/_auth/notes/$category'
    | '/_auth/notes/'
    | '/_auth/notes/$category/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  UnauthorizedRoute: typeof UnauthorizedRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/unauthorized': {
      id: '/unauthorized'
      path: '/unauthorized'
      fullPath: '/unauthorized'
      preLoaderRoute: typeof UnauthorizedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/notes/': {
      id: '/_auth/notes/'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof AuthNotesIndexRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/notes/$category': {
      id: '/_auth/notes/$category'
      path: '/notes/$category'
      fullPath: '/notes/$category'
      preLoaderRoute: typeof AuthNotesCategoryRouteRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/notes/$category/$id': {
      id: '/_auth/notes/$category/$id'
      path: '/$id'
      fullPath: '/notes/$category/$id'
      preLoaderRoute: typeof AuthNotesCategoryIdRouteImport
      parentRoute: typeof AuthNotesCategoryRouteRoute
    }
  }
}

interface AuthNotesCategoryRouteRouteChildren {
  AuthNotesCategoryIdRoute: typeof AuthNotesCategoryIdRoute
}

const AuthNotesCategoryRouteRouteChildren: AuthNotesCategoryRouteRouteChildren =
  {
    AuthNotesCategoryIdRoute: AuthNotesCategoryIdRoute,
  }

const AuthNotesCategoryRouteRouteWithChildren =
  AuthNotesCategoryRouteRoute._addFileChildren(
    AuthNotesCategoryRouteRouteChildren,
  )

interface AuthRouteRouteChildren {
  AuthNotesCategoryRouteRoute: typeof AuthNotesCategoryRouteRouteWithChildren
  AuthNotesIndexRoute: typeof AuthNotesIndexRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthNotesCategoryRouteRoute: AuthNotesCategoryRouteRouteWithChildren,
  AuthNotesIndexRoute: AuthNotesIndexRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  UnauthorizedRoute: UnauthorizedRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
